{"ast":null,"code":"var _jsxFileName = \"/home/jackson/code/pegbox/src/components/dropzone.js\";\n// import React, {useMemo} from 'react';\n// import {useDropzone} from 'react-dropzone';\n// const baseStyle = {\n//   flex: 1,\n//   display: 'flex',\n//   flexDirection: 'column',\n//   alignItems: 'center',\n//   padding: '20px',\n//   borderWidth: 2,\n//   borderRadius: 2,\n//   borderColor: '#eeeeee',\n//   borderStyle: 'dashed',\n//   backgroundColor: '#fafafa',\n//   color: '#bdbdbd',\n//   outline: 'none',\n//   transition: 'border .24s ease-in-out'\n// };\n//\n// const activeStyle = {\n//   borderColor: '#2196f3'\n// };\n//\n// const acceptStyle = {\n//   borderColor: '#00e676'\n// };\n//\n// const rejectStyle = {\n//   borderColor: '#ff1744'\n// };\n//\n// function StyledDropzone(props) {\n//   const {\n//     getRootProps,\n//     getInputProps,\n//     isDragActive,\n//     isDragAccept,\n//     isDragReject\n//   } = useDropzone({accept: 'image/*'});\n//\n//   const style = useMemo(() => ({\n//     ...baseStyle,\n//     ...(isDragActive ? activeStyle : {}),\n//     ...(isDragAccept ? acceptStyle : {}),\n//     ...(isDragReject ? rejectStyle : {})\n//   }), [\n//     isDragActive,\n//     isDragReject,\n//     isDragAccept\n//   ]);\n//\n//   return (\n//     <div className=\"container\">\n//       <div {...getRootProps({style})}>\n//         <input {...getInputProps()} />\n//         <p>Drag 'n' drop some files here, or click to select files</p>\n//       </div>\n//     </div>\n//   );\n// }\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nfunction UCFDropzone() {\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach(file => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n\n      reader.onerror = () => console.log('file reading has failed');\n\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        console.log(binaryStr);\n      };\n\n      reader.readAsText(file);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"Drag 'n' drop some files here, or click to select files\"));\n}\n\nexport default UCFDropzone;","map":{"version":3,"sources":["/home/jackson/code/pegbox/src/components/dropzone.js"],"names":["React","useCallback","useDropzone","UCFDropzone","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","readAsText","getRootProps","getInputProps"],"mappings":";AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAeC,WAAf,QAAiC,OAAjC;AACA,SAAQC,WAAR,QAA0B,gBAA1B;;AAEA,SAASC,WAAT,GAAuB;AACrB,QAAMC,MAAM,GAAGH,WAAW,CAAEI,aAAD,IAAmB;AAC5CA,IAAAA,aAAa,CAACC,OAAd,CAAuBC,IAAD,IAAU;AAC9B,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,MAAAA,MAAM,CAACE,OAAP,GAAiB,MAAMC,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACK,OAAP,GAAiB,MAAMF,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAvB;;AACAJ,MAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AACtB;AACE,cAAMC,SAAS,GAAGP,MAAM,CAACQ,MAAzB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACD,OAJD;;AAKAP,MAAAA,MAAM,CAACS,UAAP,CAAkBV,IAAlB;AACD,KAXD;AAaD,GAdyB,EAcvB,EAduB,CAA1B;AAeA,QAAM;AAACW,IAAAA,YAAD;AAAeC,IAAAA;AAAf,MAAgCjB,WAAW,CAAC;AAACE,IAAAA;AAAD,GAAD,CAAjD;AAEA,sBACE,6CAASc,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,+CAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAFF,CADF;AAMD;;AAGD,eAAehB,WAAf","sourcesContent":["// import React, {useMemo} from 'react';\n// import {useDropzone} from 'react-dropzone';\n\n// const baseStyle = {\n//   flex: 1,\n//   display: 'flex',\n//   flexDirection: 'column',\n//   alignItems: 'center',\n//   padding: '20px',\n//   borderWidth: 2,\n//   borderRadius: 2,\n//   borderColor: '#eeeeee',\n//   borderStyle: 'dashed',\n//   backgroundColor: '#fafafa',\n//   color: '#bdbdbd',\n//   outline: 'none',\n//   transition: 'border .24s ease-in-out'\n// };\n//\n// const activeStyle = {\n//   borderColor: '#2196f3'\n// };\n//\n// const acceptStyle = {\n//   borderColor: '#00e676'\n// };\n//\n// const rejectStyle = {\n//   borderColor: '#ff1744'\n// };\n//\n// function StyledDropzone(props) {\n//   const {\n//     getRootProps,\n//     getInputProps,\n//     isDragActive,\n//     isDragAccept,\n//     isDragReject\n//   } = useDropzone({accept: 'image/*'});\n//\n//   const style = useMemo(() => ({\n//     ...baseStyle,\n//     ...(isDragActive ? activeStyle : {}),\n//     ...(isDragAccept ? acceptStyle : {}),\n//     ...(isDragReject ? rejectStyle : {})\n//   }), [\n//     isDragActive,\n//     isDragReject,\n//     isDragAccept\n//   ]);\n//\n//   return (\n//     <div className=\"container\">\n//       <div {...getRootProps({style})}>\n//         <input {...getInputProps()} />\n//         <p>Drag 'n' drop some files here, or click to select files</p>\n//       </div>\n//     </div>\n//   );\n// }\nimport React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\n\nfunction UCFDropzone() {\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader()\n\n      reader.onabort = () => console.log('file reading was aborted')\n      reader.onerror = () => console.log('file reading has failed')\n      reader.onload = () => {\n      // Do whatever you want with the file contents\n        const binaryStr = reader.result\n        console.log(binaryStr)\n      }\n      reader.readAsText(file)\n    })\n\n  }, [])\n  const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      <p>Drag 'n' drop some files here, or click to select files</p>\n    </div>\n  )\n}\n\n\nexport default UCFDropzone;"]},"metadata":{},"sourceType":"module"}